
// Re write the code in programme 

float UD = 540;  // Up and Down values of the player
float LR = 960;  // Left and Right value of the player

color T = #BC0265;
color P = #2BCCD3;

float pSpeed = 15;

int talk = 0;

public void setup()
{
  size(1920, 1080);
  background(25);
  player = new ArrayList<Player>();  //  Player itself (a fountian of light blue particles)
  playerSetup = true;
}

public void draw()
{
  
 if(playerSetup == true)
  {
    fill(100);
    rect(0, 650, 1920, 500); //Creates the chat and main box
    fill(175);
    textSize(25);
    text("Please enter your name, Player:  " + playerName, 75 , 725);
    text("Press ENTER when you are finished.",75 , 775);
    
    if(key == ENTER && playerSetup == true)
    {
      playerSetup = false;
      p = true;  //Player can be seen
      
      inStart = true;
      Start = true;
    }
  }
  
  if(Start == true)
  {  
    Start();
  }
  
  if(codeOne == true)
  {
    codeOne();
  }
  
}

public void chat()
{
  
  fill(100);
  rect(0, 650, 1440, 250); //Creates the chat and main box
  if(talk == 0)
  {
    if(key == ENTER)
    {
      talk = 1;
    }
  }
  
  if(talk == 1)
  {
    fill(T); // Twilight's colour
    textSize(25);
    text("Twilight:  Hello " + playerName ,75, 725);
    text("I am Twilight, the Spirit of the Developers of Falling Fox Studio.", 75, 750);
    text("I will reveal my programming that you can change.", 75, 775); 
    text("Move to the top and we can begin your journey into Programming", 75, 800); 
  }
  
  if(talk == 2)
  {
    fill(T); // Twilight's colour
    textSize(25);
    text("Twilight:  Good. Now do you want to change your avatar's code or how the programme behaves?" ,75, 725);
    fill(P);
    text("My avatar.", 125, 750);
    text("Key 1", 175, 775);
    text("How the programme behaves.", 725, 750);
    text("Key 2", 775, 775);
    
  }
  
  
}

public void showPlayer()
{
  if(p == true)
  {
     player.add(new Player(new PVector(LR, UD)));  // Set the player at LR and UD
     
     for (int i = player.size()-1; i >= 0; i--) 
     {
      Player p = player.get(i);
      p.run();
      if (p.isDead()) 
      {
        player.remove(i);
      }
    }
    
    if(moveUp == true)
    {
      if(UD > 2)
      {
        UD -= pSpeed;
      }
    }
  
    if(moveDown == true)
    { 
      if(UD < 650)
      {
        UD += pSpeed;
      }
    }
  
    if(moveLeft == true)
    {
      if(LR > 0)
      {
        LR -= pSpeed;
      }
    }
  
    if(moveRight == true)
    {
      if(LR < 1440)
      {
        LR += pSpeed;
      }
    }
    
  }
}

public void keyPressed()
{

  if(keyCode == UP && p == true)
  {
    if(UD > 2)
    {
      UD -= pSpeed;    //Move up
      moveUp = true;
    }

  }
  
  if(keyCode == DOWN && p == true)
  {   
    if(UD < 650)
    {
      UD += pSpeed;    //Move down
      moveDown = true;
    }
  }
  
  if(keyCode == LEFT && p == true)
  {
    if(LR > 0)
    {
      LR -= pSpeed;    //Move left
      moveLeft = true;
    }
  }
  
  if(keyCode == RIGHT && p == true)
  {
    if(LR < 1440)
    {
      LR += pSpeed;    //Move right
      moveRight = true;
    }
  }

}

public class Player
{
  PVector position;
  PVector velocity;
  PVector acceleration;
  float lifespan;
 
  Player(PVector l) 
  {
    acceleration = new PVector(0,.05);
    velocity = new PVector(random(-1,1),random(-2,0));
    position = l.copy();
    lifespan = 255.0;
  }
 
  public void run() 
  {
    update();
    display();
  }
 
  public void update() 
  {
    velocity.add(acceleration);
    position.add(velocity);
    lifespan -= 2.0;
  }
 
  public void display() 
  {
    stroke(25, lifespan);
    strokeWeight(2);
    fill(P, lifespan);
    ellipse(position.x, position.y, 12, 12);
  }
 
  boolean isDead() 
  {
    if (lifespan < 0.0) 
    {
      return true;
    } 
    else 
    {
      return false;
    }
  }
  
}

















//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *














String playerName = "";
boolean playerSetup = false;

boolean p = false;  // Player
boolean Start = false;
boolean codeOne = false;

boolean moveUp = false;  //  movement for Up
boolean moveDown = false;  //  movement for Down
boolean moveLeft = false;  //  movement for Left
boolean moveRight = false;  //  movement for Right

boolean inStart = false; //Is player in the Start?


public void Start()
{
  background(25);
  showPlayer();
  
  chat();
  
  if(UD <= 2)    //move to next Scene
  {
    inStart = false;
    Start = false;
    codeOne = true;
    talk = 2;
  }
}

public void codeOne()
{
  background(25);
  showPlayer();
  UD = 900;
  LR = 970;
  chat();
}

ArrayList<Player> player;

public void keyTyped()
{
  if(playerSetup == true)
  {
    if((int)key != 8)
    {
    playerName += char(key);
    }
  }
  
}

void keyReleased()
{
  
  if(playerSetup == true)
  {
    if(keyCode == BACKSPACE)
    {
      if(playerName.length()>=1)
      {
      playerName = playerName.substring(0,playerName.length()-1);
      key = 'a';
      }
    }
  }
  
  if(keyCode == UP && p == true && moveUp == true)
  {
    moveUp = false;
  }
  
  if(keyCode == DOWN && p == true && moveDown == true)
  {    
    moveDown = false;
  }
  
  if(keyCode == LEFT && p == true && moveLeft == true)
  {
    moveLeft = false;
  }
  
  if(keyCode == RIGHT && p == true && moveRight == true)
  {
    moveRight = false;
  }
}
