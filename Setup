/*                                                                        Notes
    *  Improve Rainbow's Ai
    *  Add on to chatting
    *  Add on to story
    *  Add the Guild Compound
    *  Add combat
    *  Add a two player option on a combat arena in the guild compound
    *  Add spells for attacks
    *  Add exp and lvls?
    *  Add shops in the Science Labs
    *  
*/

ArrayList<Player> player;  // Call on the class array for Player
ArrayList<Rainbow> rainbow;  // Call on the class array for Rainbow

String playerName = "";  //Player name gets stored here
boolean playerSetup = false;  //Beginning scene the player sets their name

boolean p = false;  // Player
boolean rb = false;  //  Rainbow
boolean debug = false; // Debug

// Scenes List begin
boolean hanger = false;
boolean hallway1 = false;
boolean training = false;
// Scenes List end

boolean cutScene = true;

float UD = 400;  // Y values of the player
float LR = 875;  // X value of the player
float rbUD = 400;  // Y values of Rainbow
float rbLR = 675;  // X value of Rainbow
float pSpeed = 15;  // Player's movement speed
float UDFlow =.05;  // Where the particles "fall" on the Y axis
float LRFlow = 0;  // Where the particles "fall" on the X axis

boolean moveUp = false;  //  movement for Up
boolean moveDown = false;  //  movement for Down
boolean moveLeft = false;  //  movement for Left
boolean moveRight = false;  //  movement for Right

boolean moveInLineV = false;  // Rainbow's movement (Vertical Line)

int moveVal = -2;

// Background Images begin
PImage Hanger;
PImage Hallway1;
PImage TrainingRoom;
// Background Images end

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void setup()
{
  fullScreen();
  background(25);
  player = new ArrayList<Player>();  //  Player itself (a fountian of light blue particles)
  rainbow = new ArrayList<Rainbow>();  //Rainbow (the AI of rainbow coloured particles)
  playerSetup = true;  //Set up screen
  Hanger = loadImage("Hanger.jpg");
  Hallway1 = loadImage("Hallway1.png");
  TrainingRoom = loadImage("TrainingRoom.png");
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void draw()
{
  
  if(playerSetup == true)
  {
    chat();
    fill(175);
    textSize(25);
    text("Please enter your name, Player:  " + playerName, 75 , 725);
    text("Press ENTER when you are finished.",75 , 775);
    
    if(key == ENTER && playerSetup == true)
    {
      playerSetup = false;
      p = true;  //Player can be seen
      rb = true;  //Rainbow can be seen
      
      inHanger = true;  //Move to the hanger
      devTalk++;  // Used by Dev Team to quickly go to scenes
      hanger = true;  //Move to the hanger
      System.out.println("Player is in the Hanger");
    }
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

  if(hanger == true)
  {  
    hanger();
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
  
  if(hallway1 == true)
  {
    hallway1();
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
  
  if(training == true)
  {
    trainingRoom();
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  
  
  
  
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void keyTyped()
{
  if(playerSetup == true)
  {
    if((int)key != 8)
    {
    playerName += char(key);
    }
  }
  
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
public void keyPressed()
{

  if(keyCode == UP && p == true)
  {
    if(UD > 2)
    {
      UD -= pSpeed;    //Move up
      moveUp = true;
    }

  }
  
  if(keyCode == DOWN && p == true)
  {   
    if(UD < 650)
    {
      UD += pSpeed;    //Move down
      moveDown = true;
    }
  }
  
  if(keyCode == LEFT && p == true)
  {
    if(LR > 0)
    {
      LR -= pSpeed;    //Move left
      moveLeft = true;
    }
  }
  
  if(keyCode == RIGHT && p == true)
  {
    if(LR < 1440)
    {
      LR += pSpeed;    //Move right
      moveRight = true;
    }
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

  if(keyCode == 'D')
  {
    if(debug == false)
    {
      debug = true;
    }
    else
    {
      debug = false;
    }
  }
  
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
  
  
  
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

void keyReleased()
{
  
  if(playerSetup == true)
  {
    if(keyCode == BACKSPACE)
    {
      if(playerName.length()>=1)
      {
      playerName = playerName.substring(0,playerName.length()-1);
      key = 'a';
      }
    }
  }
  
  if(keyCode == UP && p == true && moveUp == true)
  {
    moveUp = false;
  }
  
  if(keyCode == DOWN && p == true && moveDown == true)
  {    
    moveDown = false;
  }
  
  if(keyCode == LEFT && p == true && moveLeft == true)
  {
    moveLeft = false;
  }
  
  if(keyCode == RIGHT && p == true && moveRight == true)
  {
    moveRight = false;
  }
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void mousePressed()
{
  if(cutScene == false)
  {
    spells();  // "Cast" "spells" for attacks
  }
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void showPlayer()
{
  if(p == true)
  {
     player.add(new Player(new PVector(LR, UD)));  // Set the player at LR and UD
     
     if(debug == true)  // Shows the player's hit box
     {
       fill(225, 25, 25);
       rect(LR-15, UD-15, 25, 25);
     }
  
     for (int i = player.size()-1; i >= 0; i--) 
     {
      Player p = player.get(i);
      p.run();
      if (p.isDead()) 
      {
        player.remove(i);
      }
    }
    
    if(moveUp == true)
    {
      if(UD > 2)
      {
        UD -= pSpeed;
        UDFlow = .05;
      }
    }
  
    if(moveDown == true)
    { 
      if(UD < 650)
      {
        UD += pSpeed;
        UDFlow = .0005;
      }
    }
  
    if(moveLeft == true)
    {
      if(LR > 0)
      {
        LR -= pSpeed;
        LRFlow = .05;
      }
    }
  
    if(moveRight == true)
    {
      if(LR < 1440)
      {
        LR += pSpeed;
        LRFlow = -.05;
      }
    }
    
  }
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *

public void showRainbow()
{
    if(rb == true)
  {
    
    if(moveInLineV == true)
    {
      rbUD += moveVal;  
      if(rbUD <= 0)
        {
          moveVal *= -1;
        }
        else if (rbUD >= 650)
        {
          moveVal *= -1;
        }
    }
    
//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
    
    rainbow.add(new Rainbow(new PVector(rbLR, rbUD)));  // Set Rainbow at rbLR and rbUD
     
     if(debug == true)
     {
       fill(random(75, 155),random(25, 105),random(175, 255));
       rect(rbLR-15, rbUD-15, 25, 25);  // Shows Rainbow's hit box
     }
  
     for (int i = rainbow.size()-1; i >= 0; i--) 
     {
      Rainbow r = rainbow.get(i);
      r.run();
      if (r.isDead()) 
      {
        rainbow.remove(i);
      }
    }
  }
  
  
  
}

//  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *
